import feature_functions
from inspect import getmembers, isfunction
import connect
from collections import defaultdict

def get_header(feature_functions_list):
    """ 
    Returns a column header generated from the feature_function_list
    """
    names = list(map((lambda x: x[0]), feature_functions_list))
    names.append("malware_class")
    names.insert(0,"filename")
    return ",".join(names)

def get_file_features(file_in,file_out,feature_functions_list,file_to_malware):
    """
    Returns a list representing the file features
    """

    file_features = run_feature_functions(feature_functions_list,file_in,file_out,file_to_malware)
    malware_class = get_malware_class(file_in,file_to_malware)

    # Insert filename at the front
    malware_filename = file_in.rsplit('/', 1)[1]
    file_features.insert(0, malware_filename)

    # Append malware class at the end
    file_features.append(malware_class)

    return file_features

def get_file_columns():
    rows = connect.get_file_info_rows()
    
    segment_counts = []
    opcode_counts = []
    filenames = []
    malware_class = []

    for row in rows:
        segment_counts.append(row[0])
        opcode_counts.append(row[1])
        filenames.append(row[2])
        malware_class.append(row[3])

    return (segment_counts,opcode_counts,filenames,malware_class)

def extract_count_dictionary(column_list):
    count_lists = []

    # Each l represents a file
    for l in column_list:
        count_dict = defaultdict(float)
        split = l.split(',')
        for segment in split:
            segment,count = segment.split('=')
            count_dict[segment] = int(count)
        count_lists.append(count_dict)
    return count_lists

def run_feature_functions(segments, opcodes, filenames, malware_classes):
    """
    Takes a list of dictionars of count mappings and generates features
    from them based on the list of feature_functions passed in.

    Note:
       Each feature_function should return a single value based on the list of tuples.
    """
    feature_list = []

    num_lines = feature_functions.run(feature_functions.num_lines, segments)    
    num_fun_calls = feature_functions.run(feature_functions.num_function_calls, opcodes)    
    num_unique_fun_calls = feature_functions.run(feature_functions.num_unique_functions, opcodes)  
    num_unique_segments = feature_functions.run(feature_functions.num_unique_segments, segments)  
    #segment_ratios = feature_functions.segment_ratios(segments)  
    #opcode_ratios = feature_functions.opcode_ratios(opcodes)

    header = "malware_class,num_lines,num_fun_calls,num_unique_fun_calls"
    data = []
    target = []
    for x in range(0,len(filenames)):
        line_features = []
        target.append(malware_classes[x])
        line_features.append(num_lines[x])
        line_features.append(num_fun_calls[x])
        line_features.append(num_unique_fun_calls[x])
        line_features.append(num_unique_segments[x])

        line = "{0},{1},{2},{3}".format(malware_classes[x], num_lines[x], num_fun_calls[x], num_unique_fun_calls[x])

        data.append(line_features)

    return (header,data,target)

def generate_features():
    # Get db rows:
    (segment_counts, opcode_counts, filenames, malware_class) = get_file_columns()

    # Split into lists where each element in the list is a dictionary holding the segment
    # and opcode counts for each file
    segment_lists = extract_count_dictionary(segment_counts)
    opcode_lists = extract_count_dictionary(opcode_counts)

    (header, data,target) = run_feature_functions(segment_lists,opcode_lists,filenames,malware_class)
    return header,data,target
    
if __name__ == "__main__":
    print generate_features()
    
