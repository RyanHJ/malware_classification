def get_header(feature_functions_list):
    """ 
    Returns a column header generated from the feature_function_list
    """
    names = list(map((lambda x: x[0]), feature_functions_list))
    names.append("malware_class")
    names.insert(0,"filename")
    return ",".join(names)

def extract_features(feature_functions_list,file_in,file_out,file_to_malware):
    """
    Takes in the line columns produced from extract_columns and generates features
    from them based on the list of feature_functions passed in.

    Note:
       Each feature_function should return a single value based on the list of tuples.
    """
    line_columns = extract_columns(file_in, file_out,file_to_malware)

    feature_list = []
    """
    for feature_func in feature_functions_list:
        value = feature_func[1](line_columns)
        feature_list.append(value)
        
        #UNCOMMENT TO SEE FEATURE FUNCTION NAME AND VALUE
        #print "{0}: {1}".format(feature_func[0], value)
    """
    return feature_list


def get_file_features(file_in,file_out,feature_functions_list,file_to_malware):
    """
    Returns a list representing the file features
    """

    file_features = extract_features(feature_functions_list,file_in,file_out,file_to_malware)
    malware_class = get_malware_class(file_in,file_to_malware)

    # Insert filename at the front
    malware_filename = file_in.rsplit('/', 1)[1]
    file_features.insert(0, malware_filename)

    # Append malware class at the end
    file_features.append(malware_class)

    return file_features

def generate_features():
    feature_path = "../features/"

    # Loads all feature functions from the feature_functions module
    feature_functions_list = [o for o in getmembers(feature_functions) if isfunction(o[1])]

    ##### Extract features for each file in asm file list #######
    files_features = []

    file_features = get_file_features(file_in,file_out,feature_functions_list, file_to_malware)
    files_features.append(file_features)

