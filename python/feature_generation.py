import feature_functions
from inspect import getmembers, isfunction
import connect

def get_header(feature_functions_list):
    """ 
    Returns a column header generated from the feature_function_list
    """
    names = list(map((lambda x: x[0]), feature_functions_list))
    names.append("malware_class")
    names.insert(0,"filename")
    return ",".join(names)

def run_feature_functions(feature_functions_list,file_in,file_out,file_to_malware):
    """
    Takes in the line columns produced from extract_columns and generates features
    from them based on the list of feature_functions passed in.

    Note:
       Each feature_function should return a single value based on the list of tuples.
    """
    line_columns = extract_columns(file_in, file_out,file_to_malware)

    feature_list = []
    """
    for feature_func in feature_functions_list:
        value = feature_func[1](line_columns)
        feature_list.append(value)
        
        #UNCOMMENT TO SEE FEATURE FUNCTION NAME AND VALUE
        #print "{0}: {1}".format(feature_func[0], value)
    """
    return feature_list


def get_file_features(file_in,file_out,feature_functions_list,file_to_malware):
    """
    Returns a list representing the file features
    """

    file_features = run_feature_functions(feature_functions_list,file_in,file_out,file_to_malware)
    malware_class = get_malware_class(file_in,file_to_malware)

    # Insert filename at the front
    malware_filename = file_in.rsplit('/', 1)[1]
    file_features.insert(0, malware_filename)

    # Append malware class at the end
    file_features.append(malware_class)

    return file_features

def get_file_columns():
    rows = connect.get_file_info_rows()
    
    segment_counts = []
    opcode_counts = []
    filenames = []
    malware_class = []

    for row in rows:
        segment_counts.append(row[0])
        opcode_counts.append(row[1])
        filenames.append(row[2])
        malware_class.append(row[3])

    return (segment_counts,opcode_counts,filenames,malware_class)

def extract_count_dictionary(column_list):
    count_lists = []

    # Each l represents a file
    for l in column_list:
        count_dict = {}
        split = l.split(',')
        for segment in split:
            segment,count = segment.split('=')
            count_dict[segment] = count
        count_lists.append(count_dict)

def generate_features():
    feature_path = "../features/"

    # Loads all feature functions from the feature_functions module
    feature_functions_list = [o for o in getmembers(feature_functions) if isfunction(o[1])]
    header = get_header(feature_functions_list)

    # Get db rows:
    (segment_counts, opcode_counts, filenames, malware_class) = get_file_columns()

    # Split into lists where each element in the list is a dictionary holding the segment
    # and opcode counts for each file
    segment_lists = extract_count_dictionary(segment_counts)
    opcode_lists = extract_count_dictionary(opcode_counts)

    print header

if __name__ == "__main__":
    generate_features()
    
