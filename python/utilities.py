from collections import defaultdict

def get_malware_dict(filename, return_string=True):
    """
    Extracts which maleware class the given filename is
    and builds a dictionary from the data.
    """
    malware_mappings = {}
    malware_mappings[1] = "Ramnit"
    malware_mappings[2] = "Lollipop"
    malware_mappings[3] = "Kelihos_ver3"
    malware_mappings[4] = "Vundo"
    malware_mappings[5] = "Simda"
    malware_mappings[6] = "Tracur"
    malware_mappings[7] = "Kelihos_ver1"
    malware_mappings[8] = "Obfuscator.ACY"
    malware_mappings[9] = "Gatak"

    file_to_malware = {}
    f = open(filename, 'r')
    for line in f.readlines()[1:]:
        split = line.split(',')
        (filename,mal_class) = split[0].replace('\"', ''), int(split[1])
        file_to_malware[filename] = mal_class
        
        # Return in string form
        if return_string:
            file_to_malware[filename] = malware_mappings[mal_class]

    return file_to_malware

def get_malware_class(file_in, file_to_malware):
    """
    Returns the malware classification of file
    """
    # Get just the filename without extension
    malware_filename = file_in.rsplit('/', 1)[1].split('.')[0]
    # Extract the malware class
    return file_to_malware[malware_filename]

def chunks(l, n):
    """Yield successive n-sized chunks from l."""
    for i in xrange(0, len(l), n):
        yield l[i:i+n]

def merge_dicts(dictionaries):
    result = defaultdict(int)
    for dictionary in dictionaries:
        for key,value in dictionary.iteritems():
            result[key] += value

    return result


def write_lines(lines):
    f = open('../data/features.csv', 'w')
    header = "malware_class,num_lines,num_fun_calls,num_unique_fun_calls"
    f.write(header)
    for line in lines:
        f.write(line)
    f.close()
