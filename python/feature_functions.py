from collections import defaultdict
import utilities

def num_lines(segments_list):
    """
    Returns the number of lines in the file
    """
    return sum(segments_list.values())

def num_function_calls(opcodes_list):
    """
    Returns the number of function calls in the file
    """
    return sum(opcodes_list.values()) - opcodes_list['']

def num_unique_functions(opcodes_list):
    """
    Returns the number of unique function calls found in the malware
    file.
    """
    return len(opcodes_list)

def num_unique_segments(segments_list):
    """
    Returns the number of unique segment calls found in the malware
    file.
    """
    return len(segments_list)

def segment_ratios(segments_list):
    """
    Returns what proportion each segment contributes to the overall sum of segments
    across the dataset.
    """
    return get_ratios(segments_list)

def opcode_ratios(opcodes_list):
    return get_ratios(opcodes_list)

def get_ratios(dict_count_list):
    # First get a total sum for all count:
    all_dict_counts = utilities.merge_dicts(dict_count_list)
    dict_count_ratio_list = []

    # Now iterate over each specific found in each file and produce its ratio
    for dict_count in dict_count_list:
        dict_count_ratios = defaultdict(float)  
        
        for key,value in all_dict_counts.iteritems():
            dict_count_ratios[key] = dict_count[key]/(float)(value)
        dict_count_ratio_list.append(dict_count_ratios)

    return dict_count_ratio_list

def run(func, data_struct):
    """
    Returns a list with each element representing the feature for a file
    """
    features = []
    for line in data_struct:
        features.append(func(line))

    return features
