import numpy as np
import matplotlib.pyplot as plt

import utilities
import naive_bayes_classifier

def plot_confusion_matrix(cm, title='Confusion matrix', cmap=plt.cm.Blues):
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(utilities.target_names))
    plt.xticks(tick_marks, utilities.target_names, rotation=45)
    plt.yticks(tick_marks, utilities.target_names)
    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')

if __name__ == "__main__":
    nb_cm = naive_bayes_classifier.classify()

    np.set_printoptions(precision=2)
    print('Confusion matrix, without normalization')
    print(nb_cm)
    plt.figure()
    plot_confusion_matrix(nb_cm)

    # Normalize the confusion matrix by row (i.e by the number of samples
    # in each class)
    nb_cm_normalized = nb_cm.astype('float') / nb_cm.sum(axis=1)[:, np.newaxis]
    print('Normalized confusion matrix')
    print(nb_cm_normalized)
    plt.figure()
    plot_confusion_matrix(nb_cm_normalized, title='Normalized confusion matrix')

    plt.show()
